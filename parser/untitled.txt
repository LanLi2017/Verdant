
# coding: utf-8

# Our data: read the Iowa data file into a Pandas DataFrame called `home_data`.

# In[45]:


import pandas as pd

# Path of the file to read
iowa_file_path = './train.csv'
home_data = pd.read_csv(iowa_file_path)


# ## Goal: predict house selling price

# In[46]:


Y = home_data.SalePrice
Y.head()


# ## Summary stats

# In[47]:


# Print summary statistics in next line
home_data.describe()


# In[48]:


# What is the average lot size (rounded to nearest integer)?
avg_lot_size = int(round(home_data["LotArea"].mean()))

# As of today, how old is the newest home (current year - the date in which it was built)
newest_home_age = 2018 - home_data["YearBuilt"].max()

# Checks your answers
print(avg_lot_size, newest_home_age)


# ## Features

# In[49]:


home_features = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']

X = home_data[home_features]


# In[50]:


print("X", X.head())


# ## Train & Test sets

# In[51]:


from sklearn.model_selection import train_test_split

# split data into training and validation data
train_X, val_X, train_y, val_y = train_test_split(X, Y, random_state = 0)


# ## Model

# In[52]:


from sklearn.tree import DecisionTreeRegressor

# Define model. Specify a number for random_state to ensure same results each run
house_model = DecisionTreeRegressor(max_leaf_nodes=50, random_state=1)

# Fit model
house_model.fit(train_X, train_y)


# In[53]:


from sklearn.metrics import mean_absolute_error

val_predictions = house_model.predict(val_X)
print(mean_absolute_error(val_y, val_predictions))


# In[55]:


from sklearn.metrics import mean_absolute_error
from sklearn.tree import DecisionTreeRegressor

def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):
    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(train_X, train_y) #tttt
    preds_val = model.predict(val_X)
    mae = mean_absolute_error(val_y, preds_val)
    return(mae)

